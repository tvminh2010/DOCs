1. Tạo Folder SERVER trên Desktop 
/*----------------------------------Nhập nội dung file index.js----------------------------------------------------*/
/*----------------------------------Nhập nội dung file index.js----------------------------------------------------*/
	> Tick phải chuột folder vừa tạo > Git Bash Here (Hoặc có thể dùng cmd windows, hay terminal của MAC)
	> Node init (để tạo Project nodeJS)
		> Name: Demo
		> Version:
		> description: Enter
		> Entry Point: Enter
		> Test Command: Enter
		> Git Repository: enter
		> Keywork: enter
		> Author: Trinh Van Minh
		> Màn hình confirm các tùy chọn > Yes
		> Đã tạo ra file: Pakage.json	: Là file cấu hình SERVER nodeJS
	> Các Dependencies cần cài:
		> Express	: Để làm WebServer cho NodeJS
		> EJS		: Để hỗ trợ web
		> Socket IO	: Sẽ cài sau
	> npm install express, ejs	: để cài 02 gói này
		> sinh ra thư mục: node_modules
	> Tiến hành viết code:
		Mac: có thể dùng Aton
		Win: có thể dung Notepad++, vScode....
	> Tạo file index.js trong Folder SERVER
	> Tạo thư mục public trong folder SERVER
	> Tạo thư mục views cùng cấp để chứa trang chủ.
	> tạo file: trangchu.ejs trong thư mục views:		"./views/trangchu.ejs"
	> Tải jQuery về và kéo vào thư mục public
	> Hàm đổi màu cho backgroud của trang web:
		<script src="jquery.js">
			function(data) {
				$("body").attr("bgColor", data);
			}
		 </script> 
/*---------------------------------- index.js-------------------------------------------------------------------------*/
/*---------------------------------- index.js-------------------------------------------------------------------------*/
		var express = require("express");
		var app = express();
		app.use(express.static("public"));
		app.set("view engine", "ejs");				//thiết lập view engine cho app
		app.set("views", "./views")				//Gán thư mục views có chứa trang chủ
		
		var server = require("http").Server(app);
		var io = require("socket.io")(server);			//Bổ sung thư viện socket.io, sau khi cài Socket.io = lệnh: npm install socket.io
		server.listen(3000);
		////////////////////////////////////////////////////////////////
		io.on("connection", function(socket){			//Kích hoạt chế độ lắng nghe trên IO, xem có kết nối ko? và gọi hàm nếu có sự kiện xảy ra
			console.log("Có người kết nối.");
		////////////////////////////////////////////////////////////////
			socket.on("disconnect", function(){		// Kiểm tra xem client có ngắt kết nối ko?
				console.log(socket.id + " Ngắt kết nối");	//Ra thông báo nếu có user ngắt kết nối.
			});
		////////////////////////////////////////////////////////////////
			socket.on("Ten_ket_noi", function(data){		// Trên SERVER lắng nghe, xem có id là ten_ket_noi gửi lên không?
				console.log(socket.id + " Vừa gửi dữ liệu là: " + data);
				io.sockets.emit("Ten_ket_noi = "Server_send_data", data + "888")	//emit lên toàn bộ client
				socket.emit("Ten_ket_noi = "Server_send_data", data + "888")		//emit chỉ cho client đã phát
				socket.broadcast.emit("Ten_ket_noi = "Server_send_data", data + "888")	//emit cho toàn bộ xung quanh, nhưng ko có cho người phát.
			});
		});
		////////////////////////////////////////////////////////////////					
		app.get("/",function(req, res) { res.render("trangchu")
		});
		
/*------------------------------------trangchu.ejs:---------------------------------------------------------*/		//Sẽ render cho khách hàng
/*------------------------------------trangchu.ejs:---------------------------------------------------------*/
	<script src="jquery.js"> </script> 
	<script src="socket.io/socket.io.js"> </script> 					//Khai báo thư viện socket.io.js sử dụng cho phía client.
	<script>									//Khai báo đoạn scrip để viết mã cho JQuery và SocketIO vào đây
		var socket = io("http://localhost:3000");
		socket.on("Server_send_data"' function(data){				//Khách hàng lắng nghe từ Server
			$("#noidung").append(data  + ", ")
		});

		$(document).ready(function()  {						//Đảm bảo load hết mã HTML mới chạy jquery
			$("#mrA").click(function() {					//Khi người dùng click vào phần tử html có id là: mrA thì sẽ gọi function() này.
				alert ("1")						//sẽ xóa đi sau
				socket.emit("Ten_ket_noi", "Giá trị truyền: hello");
			});
		});
	</script>
	////////////////////////////////////////////////////////////////
	<body>
		<div id= "mrA">  Click Send </div>					//Khi nhấn sẽ gọi hàm, hiển thị alert là 1
		<h2 id="noidung"> </h2>
	</body>
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
		> Cài đặt Socket IO
		> Ngắt NodeJS
		> vào màn hình CMD > gõ lệnh: npm install socket.io			//Có thể cài ngay từ đầu cùng với express và ejs.
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
		> Viết code để lắng nghe sự kiện từ user. như nội dung trong index.js
		> Viết code để gửi sự kiện lên SERVER từ user: Như trong trangchu.ejs
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
		> Giả sử a phát tín hiệu bằng mồm, b lắng nghe bằng tai thì tương đường với: 
			a sẽ Emit	-----lên --> Server, server sẽ On để Nhận -------->  B (on)
		* Viết code cho thằng a để imit lên Server, viết trong file ejs. (Phía khách hàng)
			* Do có nhiều thông tin emit lên server, lên phải có tên cho mỗi emit.
		* Viết code cho SERVER sau khi nhận được thông tin sẽ phát tín hiệu, chia ra các trường hợp (05 trường hợp)
			+ Phát cho toàn bộ client				: io.sockets.emit	(Trả về tất cả mọi người, gõ từ SERVER)
				+ Đặt tên kết nối là: Server_send_data
			+ Chỉ trả về cho đúng người A (đã phát)			: socket.emit	(Chỉ trả về thằng đã phát - Ví dụ sử dụng cho trường hợp này, nếu a đăng nhập sai thì server sẽ chỉ báo cho nó.
			+ Server chỉ phát cho những thằng bạn bè của nó		: socket.broadcast.emit  //ví dụ sử dụng: Thằng a quăng trái bom, chỉ những thằng xung quanh đứng gần mới bị mất máu.
			+ Phát ra cho 1 nhóm (Chát room) - Buổi sau sẽ học
			+ Phát riêng cho một client khác (Chát riêng với nhau)	: io.to("socketid").emit()
		* Viết code cho client lắng nghe sau khi Server phát theo các trường hợp ở trên
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/